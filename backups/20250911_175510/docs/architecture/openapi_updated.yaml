openapi: 3.0.3
info:
  title: Aigent Z Beta API
  version: 1.1.0-alpha
  description: >
    API updated to support direct blockchain writes and capability-based access
    to blakQube keys, plus global metaQube visibility.
servers:
  - url: http://localhost:8000
    description: Local dev
  - url: https://staging.aigentz.local
    description: Staging

tags:
  - name: Auth
  - name: Entitlements
  - name: iQubes
  - name: MetaQubes
  - name: Capabilities
  - name: Payments
  - name: Webhooks
  - name: MCP
  - name: ERC8004
  - name: FIO
  - name: CrossChain
  - name: Chains
  - name: A2A
  - name: ICP

paths:
  /auth/nonce:
    get:
      tags: [Auth]
      summary: Get a login nonce for wallet sign-in
      parameters:
        - in: query
          name: address
          schema: { type: string }
          required: true
      responses:
        "200":
          description: Nonce issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  nonce: { type: string }

  /auth/verify:
    post:
      tags: [Auth]
      summary: Verify a signed nonce and issue a session token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [address, signature, nonce]
              properties:
                address: { type: string }
                signature: { type: string }
                nonce: { type: string }
      responses:
        "200":
          description: Authenticated
          headers:
            X-Session-Token:
              schema: { type: string }
              description: Bearer token for subsequent calls
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResult'

  /entitlements:
    get:
      tags: [Entitlements]
      summary: List entitlements for the current session
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  entitlements:
                    type: array
                    items: { $ref: '#/components/schemas/Entitlement' }

  /iqubes:
    get:
      tags: [iQubes]
      summary: List iQubes visible to the session
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/IQube' }

  /iqubes/mint:
    post:
      tags: [iQubes, Chains]
      summary: Mint an iQube directly on chain
      description: >
        Mints an iQube on EVM (optionally LayerZero to a designated chain) or on
        the ICP/BTC pathway (dual-lock mint). The backend signs or relays the tx.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MintIqubeRequest'
      responses:
        "202":
          description: Mint accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MintIqubeResponse'

  /iqubes/{id}/blak/keys:
    get:
      tags: [iQubes, Capabilities]
      summary: List blakQube keys (metadata) for an iQube
      description: Returns key references/metadata only; values are never returned.
      parameters:
        - in: path
          name: id
          schema: { type: string }
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/BlakKey' }

  /capabilities/grant:
    post:
      tags: [Capabilities]
      summary: Grant a capability token to access a blakQube key
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CapabilityGrantRequest'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CapabilityGrant'

  /capabilities/{id}:
    delete:
      tags: [Capabilities]
      summary: Revoke a capability token
      parameters:
        - in: path
          name: id
          schema: { type: string }
          required: true
      responses:
        "204":
          description: Revoked

  /metaqubes:
    get:
      tags: [MetaQubes]
      summary: List all visible metaQubes (templates and instances)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/MetaQube' }

  /metaqubes/{id}:
    get:
      tags: [MetaQubes]
      summary: Get a metaQube by ID
      parameters:
        - in: path
          name: id
          schema: { type: string }
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetaQube'

  /chains/{chain}/tx/{txHash}/status:
    get:
      tags: [Chains]
      summary: Get on-chain tx status for a chain
      parameters:
        - in: path
          name: chain
          schema:
            type: string
            enum: [evm, icp-btc]
          required: true
        - in: path
          name: txHash
          schema: { type: string }
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TxStatus'

  /payments/intent:
    post:
      tags: [Payments]
      summary: Create a crypto payment intent (e.g. USDC/ETH testnets)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentIntentRequest'
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/PaymentIntent' }

  /payments/{id}:
    get:
      tags: [Payments]
      summary: Get a payment by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Payment' }

  /webhooks/payments:
    post:
      tags: [Webhooks]
      summary: Payment provider webhook receiver (signed)
      responses:
        "204":
          description: Accepted

  /mcp/context-bundle:
    get:
      tags: [MCP]
      summary: Fetch a context bundle for an agent (MCP server capability)
      parameters:
        - in: query
          name: agentId
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContextBundle'

  /mcp/trigger-action:
    post:
      tags: [MCP]
      summary: Trigger a named action via MCP server
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [agentId, action, params]
              properties:
                agentId: { type: string }
                action: { type: string }
                params: { type: object }
      responses:
        "202":
          description: Accepted

components:
  schemas:
    AuthResult:
      type: object
      properties:
        address: { type: string }
        token: { type: string }
        expiresAt: { type: string, format: date-time }

    Entitlement:
      type: object
      properties:
        name: { type: string }
        scope: { type: string }

    IQube:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        owner: { type: string }
        metaQubeRef: { type: string }
        blakQubeRef: { type: string }
        blakKeyRef: { type: string }
        tokenQubeRef: { type: string }
        chain: { type: string }
        chainTx: { type: string }
        status: { type: string, enum: [minting, active, failed, pending] }

    MetaQube:
      type: object
      properties:
        id: { type: string }
        chain: { type: string }
        registryTxId: { type: string }
        blakKeyRef: { type: string }
        attributes:
          type: object
          additionalProperties: true

    BlakKey:
      type: object
      properties:
        blakKeyRef: { type: string }
        keyType: { type: string }
        keyMetadata:
          type: object
          additionalProperties: true

    CapabilityGrantRequest:
      type: object
      required: [granteeUserId, blakKeyRef, scope, expiresAt]
      properties:
        granteeUserId: { type: string }
        blakKeyRef: { type: string }
        scope: { type: string, description: "e.g., read, decrypt:field1, list" }
        expiresAt: { type: string, format: date-time }

    CapabilityGrant:
      type: object
      properties:
        id: { type: string }
        granteeUserId: { type: string }
        blakKeyRef: { type: string }
        scope: { type: string }
        expiresAt: { type: string, format: date-time }
        grantProof: { type: string }

    MintIqubeRequest:
      type: object
      required: [chain, meta]
      properties:
        chain:
          type: string
          enum: [evm, icp-btc]
        meta:
          type: object
          additionalProperties: true
        dstChainId:
          type: integer
          description: "Optional LayerZero destination chain id for EVM designated-chain mints"
        type:
          type: string
          enum: [template, instance]
          default: instance

    MintIqubeResponse:
      type: object
      properties:
        id: { type: string }
        chain: { type: string }
        txHash: { type: string }
        status: { type: string }

    TxStatus:
      type: object
      properties:
        chain: { type: string }
        txHash: { type: string }
        status: { type: string, enum: [pending, confirmed, failed] }
        blockNumber: { type: integer }
        timestamp: { type: string, format: date-time }

    PaymentIntentRequest:
      type: object
      required: [productId, chainId]
      properties:
        productId: { type: string }
        chainId: { type: integer }
        amount: { type: string, description: "in smallest unit" }

    PaymentIntent:
      type: object
      properties:
        id: { type: string }
        status: { type: string, enum: [pending, confirmed, failed] }
        payTo: { type: string }
        paymentUrl: { type: string }

    Payment:
      type: object
      properties:
        id: { type: string }
        status: { type: string }
        txHash: { type: string }
        amount: { type: string }

    ContextBundle:
      type: object
      properties:
        agentId: { type: string }
        iqbRefs:
          type: array
          items: { type: string }
        summary: { type: string }
